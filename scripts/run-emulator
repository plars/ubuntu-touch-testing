#!/usr/bin/python

import logging
import os
import subprocess
import sys
import time

FULL_RETRIES = 3
# unity8 takes a long time because it needs apparmor to start. apparmor is
# slow because its parsing all the profiles on first boot. qemu seems to
# be inconsisent, sometimes this takes 8 tries, sometimes >40.
UNITY_RETRIES = 50
UNITY_WAIT = 20
ADB_RETRIES = 3
ADB_WAIT = 120

EMULATOR_ARCH = os.environ.get('EMULATOR_ARCH', 'x86')


class RetryException(Exception):
    pass


def _kill():
    logging.info('killing all emulator pids')
    with open('/dev/null', 'w') as f:
        subprocess.call(['killall', 'ubuntu-emulator'], stderr=f)
        time.sleep(1)
        subprocess.call(['killall', 'emulator-' + EMULATOR_ARCH], stderr=f)
        time.sleep(1)


def _launch():
    logging.info('launching emulator...')
    subprocess.Popen(['ubuntu-emulator', 'run', os.environ['ANDROID_SERIAL']])


def _adb_wait(retries, timeout):
    timeout = '%ds' % timeout
    for i in range(retries):
        logging.info('waiting for emulator via adb (%d of %d)...', i, retries)
        rc = subprocess.call(['timeout', timeout, 'adb', 'wait-for-device'])
        if rc == 0:
            return
        # the emulator isn't always being detected by the adb-server
        # running kill-server works around this. NOTE: this is only
        # safe when run on a slave hooked up to a single emulator
        logging.info('emulator not found, restarting adbd')
        subprocess.check_call(['adb', 'kill-server'])
    return RetryException('emulator not found via adb')


def _unity_wait(retries, timeout):
    for i in range(retries):
        logging.info('waiting for unity8 (%d of %d)...', i, retries)
        time.sleep(timeout)
        try:
            out = subprocess.check_output(
                ['adb', 'shell', 'sudo -i -u phablet status unity8'])
            if 'start/running' in out:
                return
        except subprocess.CalledProcessError:
            logging.info('adb shell failed, retrying')
    raise RetryException('unity8 not running on device')


def main():
    for i in range(FULL_RETRIES):
        try:
            _kill()
            _launch()
            _adb_wait(ADB_RETRIES, ADB_WAIT)
            logging.info('emulator is running, waiting on unity8')
            if EMULATOR_ARCH == 'arm':
                logging.info('sleeping for 160s to wait for ARM emulator')
                time.sleep(160)
            _unity_wait(UNITY_RETRIES, UNITY_WAIT)
            logging.info('emulator is booted and ready')
            return 0
        except RetryException as e:
            logging.warn('emulator failed to boot: %s', e.message)
            logging.warn('kill and retry %d more times', FULL_RETRIES - i)
            next
    logging.error('emulator failed to boot')
    _kill()
    return 1

if __name__ == '__main__':
    handler = logging.StreamHandler(stream=sys.stderr)
    formatter = logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s', datefmt='%H:%M:%S')
    handler.setFormatter(formatter)
    l = logging.getLogger('')
    l.addHandler(handler)
    l.setLevel(logging.INFO)
    exit(main())
