#!/usr/bin/env python3

"""
We always run the system-settle test before and after an autopilot test. This
script takes the results of the before/after results and combines them in with
the junit xml results from the autopilot test so we have one unified report.
"""


import os
import sys

from xml.etree import ElementTree


PRE_COMBINE = [
    ('settle_before', 'settle_before'),
    ('setup_setup', 'setup'),
]

POST_COMBINE = [
    ('settle_after', 'settle_after'),
    ('setup_teardown', 'teardown'),
]


def _build_node(classname, name, rcfile, stdout):
    e = ElementTree.Element('testcase')
    e.attrib['classname'] = classname
    e.attrib['name'] = name

    if not os.path.exists(rcfile):
        return None, False

    rc = int(open(rcfile).read())
    if rc != 0:
        f = ElementTree.Element('failure')
        e.append(f)
        f.attrib['type'] = 'testtools.testresult.real._StringException'
        f.text = open(stdout).read()
    return e, rc != 0


def _get_results(apfile):
    try:
        tree = ElementTree.parse(apfile)
    except Exception as ex:
        e = ElementTree.Element('testsuite')
        tree = ElementTree.ElementTree(e)
        e.attrib['errors'] = '1'
        e.attrib['failures'] = '0'
        e.attrib['tests'] = '1'

        # make a guess at the classname:
        classname = os.path.basename(os.path.dirname(apfile))

        t = ElementTree.Element('testcase')
        e.append(t)
        t.attrib['classname'] = classname
        t.attrib['name'] = 'phablet-test-run'

        f = ElementTree.Element('failure')
        t.append(f)
        f.attrib['type'] = 'testtools.testresult.real._StringException'
        f.text = str(ex)

    return tree


def _get_classname(results):
    return results[0].attrib.get('classname', '???').split('.')[0]


def combine(resdir):
    ap_file = os.path.join(resdir, 'test_results.xml')
    tree = _get_results(ap_file)
    ap_results = tree.getroot()
    added_results = 0

    errors = int(ap_results.attrib['errors'])

    classname = _get_classname(ap_results)

    for basename, label in PRE_COMBINE:
        rc = os.path.join(resdir, basename + '.rc')
        log = os.path.join(resdir, basename + '.log')
        node, failed = _build_node(classname, label, rc, log)
        if node is not None:
            ap_results.insert(0, node)
            if failed:
                errors += 1
            added_results += 1

    for basename, label in POST_COMBINE:
        rc = os.path.join(resdir, basename + '.rc')
        log = os.path.join(resdir, basename + '.log')
        node, failed = _build_node(classname, label, rc, log)
        if node is not None:
            ap_results.append(node)
            if failed:
                errors += 1
            added_results += 1

    num = int(ap_results.attrib['tests']) + added_results
    ap_results.attrib['tests'] = str(num)
    ap_results.attrib['errors'] = str(errors)

    tree.write(ap_file)


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('usage: {} <results directory>'.format(sys.argv[0]))
        sys.exit(1)

    combine(sys.argv[1])
